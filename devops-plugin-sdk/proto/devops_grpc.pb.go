// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: devops.proto

package proto

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DevopsClient is the client API for Devops service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DevopsClient interface {
	Name(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*wrappers.StringValue, error)
	GetResources(ctx context.Context, in *GetResourcesArgs, opts ...grpc.CallOption) (*_struct.ListValue, error)
	WatchResources(ctx context.Context, in *GetResourcesArgs, opts ...grpc.CallOption) (Devops_WatchResourcesClient, error)
	CloseResourceWatcher(ctx context.Context, in *wrappers.StringValue, opts ...grpc.CallOption) (*empty.Empty, error)
	GetResourceTypeSchema(ctx context.Context, in *wrappers.StringValue, opts ...grpc.CallOption) (*ResourceTransformer, error)
	GetResourceTypeList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetResourceTypeListResponse, error)
	GetAuthInfo(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*AuthInfoResponse, error)
	Connect(ctx context.Context, in *AuthInfo, opts ...grpc.CallOption) (*empty.Empty, error)
	GetResourceIsolatorType(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*wrappers.StringValue, error)
	GetDefaultResourceIsolator(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*wrappers.StringValue, error)
	GetSupportedActions(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetActionListResponse, error)
	ActionDeleteResource(ctx context.Context, in *ActionDeleteResourceArgs, opts ...grpc.CallOption) (*empty.Empty, error)
	ActionCreateResource(ctx context.Context, in *ActionCreateResourceArgs, opts ...grpc.CallOption) (*empty.Empty, error)
	ActionUpdateResource(ctx context.Context, in *ActionUpdateResourceArgs, opts ...grpc.CallOption) (*empty.Empty, error)
	GetSpecficActionList(ctx context.Context, in *wrappers.StringValue, opts ...grpc.CallOption) (*GetActionListResponse, error)
	PerformSpecificAction(ctx context.Context, in *SpecificActionArgs, opts ...grpc.CallOption) (*SpecificActionResult, error)
}

type devopsClient struct {
	cc grpc.ClientConnInterface
}

func NewDevopsClient(cc grpc.ClientConnInterface) DevopsClient {
	return &devopsClient{cc}
}

func (c *devopsClient) Name(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*wrappers.StringValue, error) {
	out := new(wrappers.StringValue)
	err := c.cc.Invoke(ctx, "/proto.Devops/Name", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devopsClient) GetResources(ctx context.Context, in *GetResourcesArgs, opts ...grpc.CallOption) (*_struct.ListValue, error) {
	out := new(_struct.ListValue)
	err := c.cc.Invoke(ctx, "/proto.Devops/GetResources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devopsClient) WatchResources(ctx context.Context, in *GetResourcesArgs, opts ...grpc.CallOption) (Devops_WatchResourcesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Devops_ServiceDesc.Streams[0], "/proto.Devops/WatchResources", opts...)
	if err != nil {
		return nil, err
	}
	x := &devopsWatchResourcesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Devops_WatchResourcesClient interface {
	Recv() (*WatchResourceResult, error)
	grpc.ClientStream
}

type devopsWatchResourcesClient struct {
	grpc.ClientStream
}

func (x *devopsWatchResourcesClient) Recv() (*WatchResourceResult, error) {
	m := new(WatchResourceResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *devopsClient) CloseResourceWatcher(ctx context.Context, in *wrappers.StringValue, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.Devops/CloseResourceWatcher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devopsClient) GetResourceTypeSchema(ctx context.Context, in *wrappers.StringValue, opts ...grpc.CallOption) (*ResourceTransformer, error) {
	out := new(ResourceTransformer)
	err := c.cc.Invoke(ctx, "/proto.Devops/GetResourceTypeSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devopsClient) GetResourceTypeList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetResourceTypeListResponse, error) {
	out := new(GetResourceTypeListResponse)
	err := c.cc.Invoke(ctx, "/proto.Devops/GetResourceTypeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devopsClient) GetAuthInfo(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*AuthInfoResponse, error) {
	out := new(AuthInfoResponse)
	err := c.cc.Invoke(ctx, "/proto.Devops/GetAuthInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devopsClient) Connect(ctx context.Context, in *AuthInfo, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.Devops/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devopsClient) GetResourceIsolatorType(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*wrappers.StringValue, error) {
	out := new(wrappers.StringValue)
	err := c.cc.Invoke(ctx, "/proto.Devops/GetResourceIsolatorType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devopsClient) GetDefaultResourceIsolator(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*wrappers.StringValue, error) {
	out := new(wrappers.StringValue)
	err := c.cc.Invoke(ctx, "/proto.Devops/GetDefaultResourceIsolator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devopsClient) GetSupportedActions(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetActionListResponse, error) {
	out := new(GetActionListResponse)
	err := c.cc.Invoke(ctx, "/proto.Devops/GetSupportedActions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devopsClient) ActionDeleteResource(ctx context.Context, in *ActionDeleteResourceArgs, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.Devops/ActionDeleteResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devopsClient) ActionCreateResource(ctx context.Context, in *ActionCreateResourceArgs, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.Devops/ActionCreateResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devopsClient) ActionUpdateResource(ctx context.Context, in *ActionUpdateResourceArgs, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.Devops/ActionUpdateResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devopsClient) GetSpecficActionList(ctx context.Context, in *wrappers.StringValue, opts ...grpc.CallOption) (*GetActionListResponse, error) {
	out := new(GetActionListResponse)
	err := c.cc.Invoke(ctx, "/proto.Devops/GetSpecficActionList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devopsClient) PerformSpecificAction(ctx context.Context, in *SpecificActionArgs, opts ...grpc.CallOption) (*SpecificActionResult, error) {
	out := new(SpecificActionResult)
	err := c.cc.Invoke(ctx, "/proto.Devops/PerformSpecificAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DevopsServer is the server API for Devops service.
// All implementations must embed UnimplementedDevopsServer
// for forward compatibility
type DevopsServer interface {
	Name(context.Context, *empty.Empty) (*wrappers.StringValue, error)
	GetResources(context.Context, *GetResourcesArgs) (*_struct.ListValue, error)
	WatchResources(*GetResourcesArgs, Devops_WatchResourcesServer) error
	CloseResourceWatcher(context.Context, *wrappers.StringValue) (*empty.Empty, error)
	GetResourceTypeSchema(context.Context, *wrappers.StringValue) (*ResourceTransformer, error)
	GetResourceTypeList(context.Context, *empty.Empty) (*GetResourceTypeListResponse, error)
	GetAuthInfo(context.Context, *empty.Empty) (*AuthInfoResponse, error)
	Connect(context.Context, *AuthInfo) (*empty.Empty, error)
	GetResourceIsolatorType(context.Context, *empty.Empty) (*wrappers.StringValue, error)
	GetDefaultResourceIsolator(context.Context, *empty.Empty) (*wrappers.StringValue, error)
	GetSupportedActions(context.Context, *empty.Empty) (*GetActionListResponse, error)
	ActionDeleteResource(context.Context, *ActionDeleteResourceArgs) (*empty.Empty, error)
	ActionCreateResource(context.Context, *ActionCreateResourceArgs) (*empty.Empty, error)
	ActionUpdateResource(context.Context, *ActionUpdateResourceArgs) (*empty.Empty, error)
	GetSpecficActionList(context.Context, *wrappers.StringValue) (*GetActionListResponse, error)
	PerformSpecificAction(context.Context, *SpecificActionArgs) (*SpecificActionResult, error)
	mustEmbedUnimplementedDevopsServer()
}

// UnimplementedDevopsServer must be embedded to have forward compatible implementations.
type UnimplementedDevopsServer struct {
}

func (UnimplementedDevopsServer) Name(context.Context, *empty.Empty) (*wrappers.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Name not implemented")
}
func (UnimplementedDevopsServer) GetResources(context.Context, *GetResourcesArgs) (*_struct.ListValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResources not implemented")
}
func (UnimplementedDevopsServer) WatchResources(*GetResourcesArgs, Devops_WatchResourcesServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchResources not implemented")
}
func (UnimplementedDevopsServer) CloseResourceWatcher(context.Context, *wrappers.StringValue) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseResourceWatcher not implemented")
}
func (UnimplementedDevopsServer) GetResourceTypeSchema(context.Context, *wrappers.StringValue) (*ResourceTransformer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceTypeSchema not implemented")
}
func (UnimplementedDevopsServer) GetResourceTypeList(context.Context, *empty.Empty) (*GetResourceTypeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceTypeList not implemented")
}
func (UnimplementedDevopsServer) GetAuthInfo(context.Context, *empty.Empty) (*AuthInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthInfo not implemented")
}
func (UnimplementedDevopsServer) Connect(context.Context, *AuthInfo) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedDevopsServer) GetResourceIsolatorType(context.Context, *empty.Empty) (*wrappers.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceIsolatorType not implemented")
}
func (UnimplementedDevopsServer) GetDefaultResourceIsolator(context.Context, *empty.Empty) (*wrappers.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultResourceIsolator not implemented")
}
func (UnimplementedDevopsServer) GetSupportedActions(context.Context, *empty.Empty) (*GetActionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSupportedActions not implemented")
}
func (UnimplementedDevopsServer) ActionDeleteResource(context.Context, *ActionDeleteResourceArgs) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActionDeleteResource not implemented")
}
func (UnimplementedDevopsServer) ActionCreateResource(context.Context, *ActionCreateResourceArgs) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActionCreateResource not implemented")
}
func (UnimplementedDevopsServer) ActionUpdateResource(context.Context, *ActionUpdateResourceArgs) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActionUpdateResource not implemented")
}
func (UnimplementedDevopsServer) GetSpecficActionList(context.Context, *wrappers.StringValue) (*GetActionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpecficActionList not implemented")
}
func (UnimplementedDevopsServer) PerformSpecificAction(context.Context, *SpecificActionArgs) (*SpecificActionResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerformSpecificAction not implemented")
}
func (UnimplementedDevopsServer) mustEmbedUnimplementedDevopsServer() {}

// UnsafeDevopsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DevopsServer will
// result in compilation errors.
type UnsafeDevopsServer interface {
	mustEmbedUnimplementedDevopsServer()
}

func RegisterDevopsServer(s grpc.ServiceRegistrar, srv DevopsServer) {
	s.RegisterService(&Devops_ServiceDesc, srv)
}

func _Devops_Name_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevopsServer).Name(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Devops/Name",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevopsServer).Name(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Devops_GetResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourcesArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevopsServer).GetResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Devops/GetResources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevopsServer).GetResources(ctx, req.(*GetResourcesArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Devops_WatchResources_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetResourcesArgs)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DevopsServer).WatchResources(m, &devopsWatchResourcesServer{stream})
}

type Devops_WatchResourcesServer interface {
	Send(*WatchResourceResult) error
	grpc.ServerStream
}

type devopsWatchResourcesServer struct {
	grpc.ServerStream
}

func (x *devopsWatchResourcesServer) Send(m *WatchResourceResult) error {
	return x.ServerStream.SendMsg(m)
}

func _Devops_CloseResourceWatcher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrappers.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevopsServer).CloseResourceWatcher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Devops/CloseResourceWatcher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevopsServer).CloseResourceWatcher(ctx, req.(*wrappers.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Devops_GetResourceTypeSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrappers.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevopsServer).GetResourceTypeSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Devops/GetResourceTypeSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevopsServer).GetResourceTypeSchema(ctx, req.(*wrappers.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Devops_GetResourceTypeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevopsServer).GetResourceTypeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Devops/GetResourceTypeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevopsServer).GetResourceTypeList(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Devops_GetAuthInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevopsServer).GetAuthInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Devops/GetAuthInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevopsServer).GetAuthInfo(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Devops_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevopsServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Devops/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevopsServer).Connect(ctx, req.(*AuthInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Devops_GetResourceIsolatorType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevopsServer).GetResourceIsolatorType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Devops/GetResourceIsolatorType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevopsServer).GetResourceIsolatorType(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Devops_GetDefaultResourceIsolator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevopsServer).GetDefaultResourceIsolator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Devops/GetDefaultResourceIsolator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevopsServer).GetDefaultResourceIsolator(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Devops_GetSupportedActions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevopsServer).GetSupportedActions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Devops/GetSupportedActions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevopsServer).GetSupportedActions(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Devops_ActionDeleteResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionDeleteResourceArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevopsServer).ActionDeleteResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Devops/ActionDeleteResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevopsServer).ActionDeleteResource(ctx, req.(*ActionDeleteResourceArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Devops_ActionCreateResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionCreateResourceArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevopsServer).ActionCreateResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Devops/ActionCreateResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevopsServer).ActionCreateResource(ctx, req.(*ActionCreateResourceArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Devops_ActionUpdateResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionUpdateResourceArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevopsServer).ActionUpdateResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Devops/ActionUpdateResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevopsServer).ActionUpdateResource(ctx, req.(*ActionUpdateResourceArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Devops_GetSpecficActionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrappers.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevopsServer).GetSpecficActionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Devops/GetSpecficActionList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevopsServer).GetSpecficActionList(ctx, req.(*wrappers.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Devops_PerformSpecificAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpecificActionArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevopsServer).PerformSpecificAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Devops/PerformSpecificAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevopsServer).PerformSpecificAction(ctx, req.(*SpecificActionArgs))
	}
	return interceptor(ctx, in, info, handler)
}

// Devops_ServiceDesc is the grpc.ServiceDesc for Devops service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Devops_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Devops",
	HandlerType: (*DevopsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Name",
			Handler:    _Devops_Name_Handler,
		},
		{
			MethodName: "GetResources",
			Handler:    _Devops_GetResources_Handler,
		},
		{
			MethodName: "CloseResourceWatcher",
			Handler:    _Devops_CloseResourceWatcher_Handler,
		},
		{
			MethodName: "GetResourceTypeSchema",
			Handler:    _Devops_GetResourceTypeSchema_Handler,
		},
		{
			MethodName: "GetResourceTypeList",
			Handler:    _Devops_GetResourceTypeList_Handler,
		},
		{
			MethodName: "GetAuthInfo",
			Handler:    _Devops_GetAuthInfo_Handler,
		},
		{
			MethodName: "Connect",
			Handler:    _Devops_Connect_Handler,
		},
		{
			MethodName: "GetResourceIsolatorType",
			Handler:    _Devops_GetResourceIsolatorType_Handler,
		},
		{
			MethodName: "GetDefaultResourceIsolator",
			Handler:    _Devops_GetDefaultResourceIsolator_Handler,
		},
		{
			MethodName: "GetSupportedActions",
			Handler:    _Devops_GetSupportedActions_Handler,
		},
		{
			MethodName: "ActionDeleteResource",
			Handler:    _Devops_ActionDeleteResource_Handler,
		},
		{
			MethodName: "ActionCreateResource",
			Handler:    _Devops_ActionCreateResource_Handler,
		},
		{
			MethodName: "ActionUpdateResource",
			Handler:    _Devops_ActionUpdateResource_Handler,
		},
		{
			MethodName: "GetSpecficActionList",
			Handler:    _Devops_GetSpecficActionList_Handler,
		},
		{
			MethodName: "PerformSpecificAction",
			Handler:    _Devops_PerformSpecificAction_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchResources",
			Handler:       _Devops_WatchResources_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "devops.proto",
}
