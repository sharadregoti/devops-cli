package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"strings"
	"time"

	"github.com/sharadregoti/devops/common"
	pm "github.com/sharadregoti/devops/internal/pluginmanager"
	"github.com/sharadregoti/devops/internal/tui"
	"github.com/sharadregoti/devops/model"

	// _ "github.com/sharadregoti/devops/docs" // docs is generated by Swag CLI, you have to import it.
	"github.com/sharadregoti/devops/server"
	"github.com/spf13/cobra"
	"github.com/spf13/pflag"
	"github.com/spf13/viper"
)

const VERSION = "0.2.0"

// @title NEW Devops API
// @version v0.1.0
// @description Devops API Sec
// @host localhost:4949
func main() {
	if err := NewCommand().Execute(); err != nil {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}
}

// NewCommand return xlr8s sub commands
func NewCommand() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "devops",
		Short: "Your helping hand for DevOps",
		Run: func(cmd *cobra.Command, args []string) {
			cmd.HelpFunc()(cmd, args)
		},
		PreRun: func(cmd *cobra.Command, args []string) {
			viper.AutomaticEnv()
			// When using environment variables, replace . with _ and - with _
			viper.SetEnvKeyReplacer(strings.NewReplacer("-", "_", ".", "_"))

			f := cmd.Flags()
			// When using configuration files, replace - with _
			normalizeFunc := f.GetNormalizeFunc()
			f.SetNormalizeFunc(func(fs *pflag.FlagSet, name string) pflag.NormalizedName {
				result := normalizeFunc(fs, name)
				name = strings.ReplaceAll(string(result), "-", "_")
				return pflag.NormalizedName(name)
			})
			viper.BindPFlags(f)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			startTime := time.Now()

			log.Println("Checking for updates...")

			if common.Release {
				version, err := getLatestVersion()
				if err != nil {
					return err
				}

				if isGreater(version, VERSION) {
					log.Println("Update available to version:", version)
					log.Println("Upgrading devops CLI...")
					if err = runUpgrade(); err != nil {
						fmt.Println("Updgrade failed: try manual upgration")
					} else {
						return nil
					}
				}
			}

			go func() {
				common.ConnInit()
				common.IncrementAppStarts()
			}()

			defer func() {
				endTime := time.Now()

				// Report the usage time to some external service
				common.ReportUsageTime(startTime, endTime)
			}()

			// Read the configuration file
			viper.SetConfigType("yaml")
			configFilePath := viper.GetString("config")
			if configFilePath != "" {
				viper.SetConfigFile(configFilePath)
			} else {
				viper.AddConfigPath(".")
			}

			if err := viper.ReadInConfig(); err != nil {
				return fmt.Errorf("error reading config file, %v", err)
			}

			var conf model.Config
			if err := viper.Unmarshal(&conf); err != nil {
				return fmt.Errorf("unable to decode into struct, %v", err)
			}

			if len(conf.Plugins) == 0 {
				log.Fatal("No plugins were specified in the configuration, Exitting...")
			}

			if err := pm.ValidatePlugins(&conf); err != nil {
				return err
			}

			fmt.Println("Documentation & Issues can be viewed at: https://github.com/sharadregoti/devops-cli")
			s, err := server.New(&conf)
			if err != nil {
				return err
			}

			if err := s.Start(); err != nil {
				return err
			}

			return nil
		},
	}

	// Add all sub commands
	// cmd.AddCommand(NewInitCommand())
	cmd.AddCommand(NewVersionCommand())
	cmd.AddCommand(NewTUICommand())

	cmd.Flags().StringP("server.address", "", "localhost:9753", "Server listen address")
	return cmd
}

func NewInitCommand() *cobra.Command {
	cmd := &cobra.Command{
		Use:    "init",
		Short:  "Installs plugins as per configuration",
		PreRun: func(cmd *cobra.Command, args []string) {},
		RunE: func(cmd *cobra.Command, args []string) error {
			return nil
		},
	}

	return cmd
}

func NewTUICommand() *cobra.Command {
	cmd := &cobra.Command{
		Use:    "tui",
		Short:  "Starts TUI interface",
		PreRun: func(cmd *cobra.Command, args []string) {},
		RunE: func(cmd *cobra.Command, args []string) error {
			return tui.Start(viper.GetString("address"))
		},
	}

	cmd.Flags().StringP("address", "", "localhost:9753", "Devops server address")
	return cmd
}

func NewVersionCommand() *cobra.Command {
	cmd := &cobra.Command{
		Use:    "version",
		Short:  "Prints the version of devops CLI",
		PreRun: func(cmd *cobra.Command, args []string) {},
		RunE: func(cmd *cobra.Command, args []string) error {
			fmt.Println(VERSION)
			return nil
		},
	}

	return cmd
}

func getLatestVersion() (string, error) {
	// Replace with the URL of the public git repository you want to fetch the latest tag from
	url := "https://api.github.com/repos/sharadregoti/devops-cli/releases/latest"

	// Make an HTTP GET request to the GitHub API
	resp, err := http.Get(url)
	if err != nil {
		log.Printf("failed to fetch latest version: %v\n", err)
		return "", err
	}
	defer resp.Body.Close()

	// Read the response body
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		log.Printf("failed to fetch latest version: %v\n", err)
		return "", err
	}

	type Release struct {
		TagName string `json:"tag_name"`
	}

	// Unmarshal the JSON response into a Release struct
	var release Release
	if err := json.Unmarshal(body, &release); err != nil {
		log.Printf("failed to unmarshal json response: %v\n", err)
		return "", err
	}

	return release.TagName, nil
}
