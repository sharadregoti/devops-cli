operations:
  - name: "namespace"
    json_paths:
      - path: "metadata.namespace"
    output_format: ""
  - name: "name"
    json_paths:
      - path: "metadata.name"
    output_format: ""
  - name: "ready"
    json_paths:
      - path: "status.containerStatuses.#(ready==true)#|#"
      - path: "status.containerStatuses.#"
    output_format: "%v/%v"
  - name: "restarts"
    json_paths:
      - path: "status.containerStatuses.0.restartCount"
    output_format: ""
  - name: "status"
    json_paths:
      - path: "devops.customCalculatedStatus"
    output_format: ""
  - name: "ip"
    json_paths:
      - path: "status.podIP"
    output_format: ""
  - name: "node"
    json_paths:
      - path: "spec.nodeName"
    output_format: ""
  - name: "age"
    json_paths:
      - path: "metadata.creationTimestamp|@age"
    output_format: ""
nesting:
  is_nested: true
  resource_type: "containers"
  args:
  # is_self_contained_in_parent: true
  # parent_data_paths :
  # - spec.containers
  # - spec.initContainers
styles:
  - row_background_color: darkorange
    conditions:
      - 'devops.customCalculatedStatus == "Pending"'
  - row_background_color: white
    conditions:
      - 'devops.customCalculatedStatus == "ContainerCreating" || devops.customCalculatedStatus == "PodInitializing"'
  - row_background_color: aqua
    conditions:
      - 'devops.customCalculatedStatus == "Initialized"'
  - row_background_color: gray
    conditions:
      - 'devops.customCalculatedStatus == "Completed"'
  - row_background_color: lightskyblue
    conditions:
      - 'devops.customCalculatedStatus == "Running"'
  - row_background_color: mediumpurple
    conditions:
      - 'devops.customCalculatedStatus == "Terminating"'
  - row_background_color: red
    conditions:
      - "true"
specific_actions:
  - name: "describe"
    key_binding: "d"
    execution:
      cmd: |
        #!/bin/bash
        kubectl describe {{.resourceType}} {{.resourceName}} -n "{{.isolatorName}}" --kubeconfig {{.authPath}} --context {{.authName}}
    output_type: "string"
  - name: "logs"
    key_binding: "l"
    execution:
      cmd: |
        #!/bin/bash
        kubectl logs {{.resourceName}} -n {{.isolatorName}} -c {{(index .resource.spec.containers 0).name}} -f --kubeconfig {{.authPath}} --context {{.authName}}
        while :; do
          :
        done
    output_type: "stream"
  - name: "shell"
    key_binding: "s"
    execution:
      cmd: |
        #!/bin/bash
        kubectl --kubeconfig {{.authPath}} --context {{.authName}} exec -it {{.resourceName}} -n {{.isolatorName}} -c {{(index .resource.spec.containers 0).name}} -- sh -c "command -v bash >/dev/null && exec bash || exec sh"
    output_type: "bidirectional"
  - name: "open-app"
    key_binding: "o"
    output_type: "nothing"
    execution:
      cmd: |
        #!/bin/bash


        if [[ "$(uname)" == "Linux" ]]; then
            xdg-open "http://localhost:{{.args.localPort}}/"
        elif [[ "$(uname)" == "Darwin" ]]; then
            open "http://localhost:{{.args.localPort}}/"
        else
            echo "Unsupported operating system: $(uname)"
            exit 1
        fi

        # Run this in background
        kubectl --kubeconfig {{.authPath}} --context {{.authName}} port-forward {{.resourceName}} -n {{.isolatorName}} {{.args.localPort}}:{{.args.containerPort}} --address {{.args.address}}
      is_long_running: true
      user_input:
        required: true
        args:
          # The below template returns the first container port of the first container of the pod
          containerPort: |
            {{- if .resource.spec.containers -}}
              {{- if (index .resource.spec.containers 0).ports -}}
                {{- if (index (index .resource.spec.containers 0).ports 0) -}}
                  {{- (index (index .resource.spec.containers 0).ports 0).containerPort -}}
                {{- end -}}
              {{- end -}}
            {{- end -}}
          localPort: |
            {{- if .resource.spec.containers -}}
              {{- if (index .resource.spec.containers 0).ports -}}
                {{- if (index (index .resource.spec.containers 0).ports 0) -}}
                  {{- (index (index .resource.spec.containers 0).ports 0).containerPort -}}
                {{- end -}}
              {{- end -}}
            {{- end -}}
          address: "localhost"
      server_input:
        required: false
  - name: "port-forward"
    key_binding: "f"
    output_type: "nothing"
    execution:
      cmd: |
        #!/bin/bash
        kubectl --kubeconfig {{.authPath}} --context {{.authName}} port-forward {{.resourceName}} -n {{.isolatorName}} {{.args.localPort}}:{{.args.containerPort}} --address {{.args.address}}
      is_long_running: true
      user_input:
        required: true
        args:
          # The below template returns the first container port of the first container of the pod
          containerPort: |
            {{- if .resource.spec.containers -}}
              {{- if (index .resource.spec.containers 0).ports -}}
                {{- if (index (index .resource.spec.containers 0).ports 0) -}}
                  {{- (index (index .resource.spec.containers 0).ports 0).containerPort -}}
                {{- end -}}
              {{- end -}}
            {{- end -}}
          localPort: |
            {{- if .resource.spec.containers -}}
              {{- if (index .resource.spec.containers 0).ports -}}
                {{- if (index (index .resource.spec.containers 0).ports 0) -}}
                  {{- (index (index .resource.spec.containers 0).ports 0).containerPort -}}
                {{- end -}}
              {{- end -}}
            {{- end -}}
          address: "localhost"
      server_input:
        required: false
