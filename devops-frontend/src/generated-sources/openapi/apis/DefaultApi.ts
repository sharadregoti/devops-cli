/* tslint:disable */
/* eslint-disable */
/**
 * NEW Devops API
 * Devops API Sec
 *
 * The version of the OpenAPI document: v0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ModelAuthResponse,
  ModelConfig,
  ModelErrorResponse,
  ModelEventResponse,
  ModelFrontendEvent,
  ModelInfoResponse,
} from '../models';
import {
    ModelAuthResponseFromJSON,
    ModelAuthResponseToJSON,
    ModelConfigFromJSON,
    ModelConfigToJSON,
    ModelErrorResponseFromJSON,
    ModelErrorResponseToJSON,
    ModelEventResponseFromJSON,
    ModelEventResponseToJSON,
    ModelFrontendEventFromJSON,
    ModelFrontendEventToJSON,
    ModelInfoResponseFromJSON,
    ModelInfoResponseToJSON,
} from '../models';

export interface HandleAuthRequest {
    pluginName: string;
}

export interface HandleEventRequest {
    id: string;
    modelFrontendEvent: ModelFrontendEvent;
}

export interface HandleInfoRequest {
    pluginName: string;
    authId: string;
    contextId: string;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * HandleAuth endpoint
     * HandleAuth endpoint
     */
    async handleAuthRaw(requestParameters: HandleAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelAuthResponse>> {
        if (requestParameters.pluginName === null || requestParameters.pluginName === undefined) {
            throw new runtime.RequiredError('pluginName','Required parameter requestParameters.pluginName was null or undefined when calling handleAuth.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/auth/{pluginName}`.replace(`{${"pluginName"}}`, encodeURIComponent(String(requestParameters.pluginName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelAuthResponseFromJSON(jsonValue));
    }

    /**
     * HandleAuth endpoint
     * HandleAuth endpoint
     */
    async handleAuth(requestParameters: HandleAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelAuthResponse> {
        const response = await this.handleAuthRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * HandleConfig endpoint
     * HandleConfig endpoint
     */
    async handleConfigRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelConfig>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/config`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelConfigFromJSON(jsonValue));
    }

    /**
     * HandleConfig endpoint
     * HandleConfig endpoint
     */
    async handleConfig(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelConfig> {
        const response = await this.handleConfigRaw(initOverrides);
        return await response.value();
    }

    /**
     * HandleEvent endpoint
     * HandleEvent endpoint
     */
    async handleEventRaw(requestParameters: HandleEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelEventResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling handleEvent.');
        }

        if (requestParameters.modelFrontendEvent === null || requestParameters.modelFrontendEvent === undefined) {
            throw new runtime.RequiredError('modelFrontendEvent','Required parameter requestParameters.modelFrontendEvent was null or undefined when calling handleEvent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/events/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModelFrontendEventToJSON(requestParameters.modelFrontendEvent),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelEventResponseFromJSON(jsonValue));
    }

    /**
     * HandleEvent endpoint
     * HandleEvent endpoint
     */
    async handleEvent(requestParameters: HandleEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelEventResponse> {
        const response = await this.handleEventRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * HandleInfo endpoint
     * HandleInfo endpoint
     */
    async handleInfoRaw(requestParameters: HandleInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelInfoResponse>> {
        if (requestParameters.pluginName === null || requestParameters.pluginName === undefined) {
            throw new runtime.RequiredError('pluginName','Required parameter requestParameters.pluginName was null or undefined when calling handleInfo.');
        }

        if (requestParameters.authId === null || requestParameters.authId === undefined) {
            throw new runtime.RequiredError('authId','Required parameter requestParameters.authId was null or undefined when calling handleInfo.');
        }

        if (requestParameters.contextId === null || requestParameters.contextId === undefined) {
            throw new runtime.RequiredError('contextId','Required parameter requestParameters.contextId was null or undefined when calling handleInfo.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/connect/{pluginName}/{authId}/{contextId}`.replace(`{${"pluginName"}}`, encodeURIComponent(String(requestParameters.pluginName))).replace(`{${"authId"}}`, encodeURIComponent(String(requestParameters.authId))).replace(`{${"contextId"}}`, encodeURIComponent(String(requestParameters.contextId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelInfoResponseFromJSON(jsonValue));
    }

    /**
     * HandleInfo endpoint
     * HandleInfo endpoint
     */
    async handleInfo(requestParameters: HandleInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelInfoResponse> {
        const response = await this.handleInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
