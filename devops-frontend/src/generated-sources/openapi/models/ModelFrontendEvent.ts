/* tslint:disable */
/* eslint-disable */
/**
 * NEW Devops API
 * Devops API Sec
 *
 * The version of the OpenAPI document: v0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ModelFrontendEvent
 */
export interface ModelFrontendEvent {
    /**
     * 
     * @type {object}
     * @memberof ModelFrontendEvent
     */
    args?: object;
    /**
     * 
     * @type {string}
     * @memberof ModelFrontendEvent
     */
    eventType?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelFrontendEvent
     */
    isolatorName?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelFrontendEvent
     */
    name?: ModelFrontendEventNameEnum;
    /**
     * 
     * @type {string}
     * @memberof ModelFrontendEvent
     */
    pluginName?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelFrontendEvent
     */
    resourceName?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelFrontendEvent
     */
    resourceType?: string;
}


/**
 * @export
 */
export const ModelFrontendEventNameEnum = {
    Read: 'read',
    Delete: 'delete',
    Update: 'update',
    Create: 'create',
    Edit: 'edit',
    ViewLongRunning: 'view-long-running',
    DeleteLongRunning: 'delete-long-running',
    ResourceTypeChange: 'resource-type-change',
    IsolatorChange: 'isolator-change',
    RefreshResource: 'refresh-resource'
} as const;
export type ModelFrontendEventNameEnum = typeof ModelFrontendEventNameEnum[keyof typeof ModelFrontendEventNameEnum];


/**
 * Check if a given object implements the ModelFrontendEvent interface.
 */
export function instanceOfModelFrontendEvent(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ModelFrontendEventFromJSON(json: any): ModelFrontendEvent {
    return ModelFrontendEventFromJSONTyped(json, false);
}

export function ModelFrontendEventFromJSONTyped(json: any, ignoreDiscriminator: boolean): ModelFrontendEvent {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'args': !exists(json, 'args') ? undefined : json['args'],
        'eventType': !exists(json, 'eventType') ? undefined : json['eventType'],
        'isolatorName': !exists(json, 'isolatorName') ? undefined : json['isolatorName'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'pluginName': !exists(json, 'pluginName') ? undefined : json['pluginName'],
        'resourceName': !exists(json, 'resourceName') ? undefined : json['resourceName'],
        'resourceType': !exists(json, 'resourceType') ? undefined : json['resourceType'],
    };
}

export function ModelFrontendEventToJSON(value?: ModelFrontendEvent | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'args': value.args,
        'eventType': value.eventType,
        'isolatorName': value.isolatorName,
        'name': value.name,
        'pluginName': value.pluginName,
        'resourceName': value.resourceName,
        'resourceType': value.resourceType,
    };
}

